from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from db import SessionLocal
from models import Currency, Airline, Translation

API_TOKEN = '–ó–¥–µ—Å—å –º–æ–π –∞–ø–∏ –∫–ª—é—á –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞'
TP_API_TOKEN = '–ó–¥–µ—Å—å –º–æ–π –∞–ø–∏ –∫–ª—é—á –∞–≤–∏–∞—Å–µ–π–ª—Å'

translations = {
    "ru": {
        "choose_currency": "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:",
        "welcome": "üëã –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n`–º–æ—Å–∫–≤–∞ —Å–æ—á–∏`\n–∏–ª–∏ —Å –¥–∞—Ç–æ–π: `–º–æ—Å–∫–≤–∞ —Å–æ—á–∏ 17-05-2025`",
        "invalid_format": "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –≥–æ—Ä–æ–¥1 –≥–æ—Ä–æ–¥2 [–¥–∞—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 12-05-2025]",
        "city_error": "üòï –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≥–æ—Ä–æ–¥–æ–≤.",
        "date_error": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥-–º–º-–≥–≥–≥–≥.",
        "past_date": "‚ùó –î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º. –£–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É",
        "not_found": "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–∏–ª–µ—Ç—ã –ø–æ —ç—Ç–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É.",
        "language_set": "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π üá∑üá∫",
        "currency_set": "–í–∞–ª—é—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {currency}",
        "calendar_title": "üìÖ {month} {year}",
        "weekdays": ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"],
        "calendar_done": "‚úîÔ∏è –ì–æ—Ç–æ–≤–æ",
        "calendar_clear": "‚ùå –û—á–∏—Å—Ç–∏—Ç—å",
        "calendar_no_dates": "‚ùó –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –¥–∞—Ç—ã.",
        "filters_title": "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã:",
        "choose_dates": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã:",
        "track_saved": "‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è {n} –¥–∞—Ç—ã(–¥–∞—Ç).",
        "track_prompt_dates": "‚úÖ –î–∞—Ç—ã –≤—ã–±—Ä–∞–Ω—ã! –°–µ–π—á–∞—Å —É—Ç–æ—á–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...",
        "track_price_set": "üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {value} {currency}",
        "track_percent_set": "üìâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ –Ω–∞ {value}%",
        "track_price_label": "–¶–µ–Ω–∞:",
        "track_percent_label": "–°–Ω–∏–∂–µ–Ω–∏–µ:",
        "positive_number_only": "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
        "untrack_button": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
        "notification_price_condition": "—Ü–µ–Ω–∞ ‚â§ {price}",
        "notification_percent_condition": "—Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ {percent}%",
        "notification_text": "üîî –ë–∏–ª–µ—Ç *{origin} ‚Üí {destination}* –Ω–∞ {date}\nüí∞ –¶–µ–Ω–∞: {price} {currency}{condition}",
        "calendar_no_route": "–û—à–∏–±–∫–∞: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.",
        "route_header": "–ë–∏–ª–µ—Ç—ã –ø–æ –º–∞—Ä—à—Ä—É—Ç—É:",
        "unknown_currency": "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞.",
        "buy_button": "–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç",
        "multi_passenger_warning": "‚ö†Ô∏è –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –º–æ–∂–µ—Ç –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç.",
        "filter_set": "–§–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {passengers} {word}",
        "filter_done": "‚úîÔ∏è –ì–æ—Ç–æ–≤–æ",
        "filters_cleared": "–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã ‚úÖ",
        "filter_reset": "‚ùå –°–±—Ä–æ—Å–∏—Ç—å",
        "direct_flights_only": "–¢–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã",
        "moscow_time": "–ú–°–ö",
        "include_transfers": "–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–µ—Ä–µ—Å–∞–¥–∫–∏",
        "no_history": "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞.",
        "direct": "–ü—Ä—è–º–æ–π —Ä–µ–π—Å",
        "with_transfers": "–° –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º–∏",
        "track_confirm_missing": "‚ùó –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã —Ü–µ–Ω—É –∏–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–Ω–∏–∂–µ–Ω–∏—è.",
        "track_set_price": "üí∞ –£–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É",
        "track_set_price_val": "üí∞ –£–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É ({value})",
        "track_set_percent": "üìâ –£–∫–∞–∑–∞—Ç—å %",
        "track_set_percent_val": "üìâ –£–∫–∞–∑–∞—Ç—å % ({value}%)",
        "track_save": "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
        "track_cancel": "‚ùå –û—Ç–º–µ–Ω–∞",
        "tracking_parameters_prompt": "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! –°–µ–π—á–∞—Å —É—Ç–æ—á–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...",
        "feedback_thanks": "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!",
        "no_active_tracks": "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π.",
        "track_cancelled": "‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        "no_all_tracks": "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.",
        "untrack_not_found": "‚ö†Ô∏è –£–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
        "transfers_selected": "–ü–µ—Ä–µ—Å–∞–¥–∫–∏",
        "feedback_prompt": "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        "user_not_found": "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        "untrack_cancelled": "‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        "notification_error": "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {error}",
        "status_active": "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ",
        "track_start_prompt": "üëã –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n`–º–æ—Å–∫–≤–∞ —Å–æ—á–∏`\n–∏–ª–∏ —Å –¥–∞—Ç–æ–π: `–º–æ—Å–∫–≤–∞ —Å–æ—á–∏ 17-05-2025`",
        "stop_tracking": "–£–¥–∞–ª–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ",
        "status_cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
        "history_user_not_found": "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        "track_enter_price": "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7000):",
        "track_enter_percent": "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–Ω–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15):",
        "no_direct_but_with_transfers": "‚úàÔ∏è –ë–∏–ª–µ—Ç—ã –±–µ–∑ –ø–µ—Ä–µ—Å–∞–¥–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å —Å –ø–µ—Ä–µ—Å–∞–¥–∫–∞–º–∏:",
        "searching_selected_dates": "üîç –ü–æ–∏—Å–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–∞—Ç–∞–º...",
        "calendar_no_route": "–û—à–∏–±–∫–∞: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.",
        "months": ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
           "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"],
        "help_text": "‚ÑπÔ∏è *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*\n"
                "/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏ –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫\n"
                "/lang ‚Äî —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫\n"
                "/currency ‚Äî –≤—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É\n"
                "/filters ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã\n"
                "/reset_filters ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
                "/history ‚Äî –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞\n"
                "/track ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç\n"
                "/mytracks ‚Äî –º–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã\n"
                "/alltracks ‚Äî –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
                "/feedback ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n"
                "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
                "*–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:*\n"
                "`–≥–æ—Ä–æ–¥1 –≥–æ—Ä–æ–¥2 \\[–¥–∞—Ç–∞\\]`\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "`–º–æ—Å–∫–≤–∞ —Å–æ—á–∏` ‚Äî –ø–æ—è–≤–∏—Ç—Å—è –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç\n"
                "`–º–æ—Å–∫–≤–∞ —Å–æ—á–∏ 12-06-2025` ‚Äî –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É."
    },
    "en": {
        "choose_currency": "Choose a currency:",
        "welcome": "üëã Enter a route like:\n`moscow sochi`\nor with date: `moscow sochi 17-05-2025`",
        "invalid_format": "Enter route in format: city1 city2 [date, e.g. 12-05-2025]",
        "city_error": "üòï One of the cities was not recognized.",
        "date_error": "‚ùå Invalid date format. Use dd-mm-yyyy.",
        "past_date": "‚ùó The date is in the past. Choose a future one",
        "not_found": "üòï No tickets found on this route.",
        "language_set": "Language set: English üá¨üáß",
        "user_not_found": "‚ùå User not found.",
        "no_active_tracks": "You have no active tracking routes.",
        "currency_set": "Currency set to: {currency}",
        "calendar_title": "üìÖ {month} {year}",
        "weekdays": ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
        "calendar_done": "‚úîÔ∏è Done",
        "calendar_clear": "‚ùå Clear",
        "track_cancelled": "‚ùå Tracking cancelled.",
        "positive_number_only": "Please enter a positive number.",
        "calendar_no_dates": "‚ùó You haven't selected any dates.",
        "choose_dates": "Select dates:",
        "route_header": "Tickets for route:",
        "track_enter_price": "Enter max price (e.g. 7000):",
        "track_enter_percent": "Enter price drop percent (e.g. 15):",
        "track_saved": "‚úÖ Tracking saved for {n} date(s).",
        "no_all_tracks": "You haven't tracked any routes yet.",
        "buy_button": "Buy ticket",
        "filters_title": "Choose filters:",
        "track_start_prompt": "üëã Enter a tracking route, e.g.:\n`moscow sochi`\nor with date: `moscow sochi 17-05-2025`",
        "stop_tracking": "Stop tracking",
        "track_confirm_missing": "‚ùó Please set at least a price or a percentage drop.",
        "untrack_not_found": "‚ö†Ô∏è Already cancelled or not found.",
        "feedback_prompt": "‚úçÔ∏è Please type your feedback in one message:",
        "moscow_time": "MSK",
        "tracking_parameters_prompt": "‚úÖ Got it! Now let's configure notification settings...",
        "feedback_thanks": "‚úÖ Thank you for your feedback!",
        "track_prompt_dates": "‚úÖ Dates selected! Now let's configure notification settings...",
        "track_price_set": "üí∞ Max price set: {value} {currency}",
        "track_percent_set": "üìâ Will notify if price drops by {value}%",
        "track_price_label": "Price:",
        "track_percent_label": "Drop:",
        "untrack_button": "‚ùå Cancel",
        "notification_price_condition": "price ‚â§ {price}",
        "notification_percent_condition": "{percent}% drop",
        "notification_text": "üîî Ticket *{origin} ‚Üí {destination}* on {date}\nüí∞ Price: {price} {currency}{condition}",
        "unknown_currency": "‚ùå Unknown currency.",
        "no_history": "Search history is empty.",
        "untrack_cancelled": "‚ùå Tracking cancelled.",
        "notification_error": "‚ùó Error sending notification: {error}",
        "status_active": "‚úÖ Active",
        "status_cancelled": "‚ùå Cancelled",
        "history_user_not_found": "‚ùå User not found.",
        "direct": "Direct flight",
        "with_transfers": "With transfers",
        "multi_passenger_warning": "‚ö†Ô∏è The total price for multiple passengers is approximate and may slightly vary depending on seat availability.",
        "filter_set": "Filter set: {passengers} {word}",
        "filter_done": "‚úîÔ∏è Done",
        "filters_cleared": "Filters have been reset ‚úÖ",
        "filter_reset": "‚ùå Reset",
        "direct_flights_only": "Direct flights only",
        "include_transfers": "Include transfers",
        "track_set_price": "üí∞ Set price",
        "track_set_price_val": "üí∞ Set price ({value})",
        "track_set_percent": "üìâ Set % drop",
        "track_set_percent_val": "üìâ Set % drop ({value}%)",
        "track_save": "‚úÖ Save",
        "track_cancel": "‚ùå Cancel",
        "transfers_selected": "Transfers",
        "no_direct_but_with_transfers": "‚úàÔ∏è No direct flights found, but some options with transfers are available:",
        "searching_selected_dates": "üîç Searching selected dates...",
        "calendar_no_route": "Error: no active route selected.",
        "months": ["January", "February", "March", "April", "May", "June",
           "July", "August", "September", "October", "November", "December"],
        "help_text": "‚ÑπÔ∏è *Bot commands:*\n"
                "/start ‚Äî restart and select language\n"
                "/lang ‚Äî change language\n"
                "/currency ‚Äî choose currency\n"
                "/filters ‚Äî configure filters\n"
                "/reset\\_filters ‚Äî reset filters to default values\n"
                "/history ‚Äî search history\n"
                "/track ‚Äî track a route\n"
                "/mytracks ‚Äî my tracked routes\n"
                "/alltracks ‚Äî all tracked routes\n"
                "/feedback ‚Äî leave feedback\n"
                "/help ‚Äî show this message\n\n"
                "*Enter the route in the format:*\n"
                "`city1 city2 \\[date\\]`\n"
                "For example:\n"
                "`moscow sochi` ‚Äî calendar will appear for selecting dates\n"
                "`moscow sochi 12-06-2025` ‚Äî search will run for that date."
    }
}

translation_cache = {}

def t(key, lang="ru", **kwargs):
    cached = translation_cache.get((key, lang))
    if cached:
        return cached.format(**kwargs)
    session = SessionLocal()
    entry = session.query(Translation).filter_by(key=key, lang=lang).first()
    session.close()
    if entry:
        translation_cache[(key, lang)] = entry.value
        return entry.value.format(**kwargs)
    fallback = translations.get(lang, {}).get(key, key)
    translation_cache[(key, lang)] = fallback
    return fallback.format(**kwargs)

def plural_passenger(count, lang):
    if lang == "ru":
        if count % 10 == 1 and count % 100 != 11:
            return "–ø–∞—Å—Å–∞–∂–∏—Ä"
        elif count % 10 in [2, 3, 4] and count % 100 not in [12, 13, 14]:
            return "–ø–∞—Å—Å–∞–∂–∏—Ä–∞"
        else:
            return "–ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"
    return "passenger" if count == 1 else "passengers"

def fill_currencies():
    session = SessionLocal()
    currencies = [
        {"code": "RUB", "name": "Russian Ruble", "symbol": "‚ÇΩ", "flag": "üá∑üá∫"},
        {"code": "USD", "name": "US Dollar", "symbol": "$", "flag": "üá∫üá∏"},
        {"code": "EUR", "name": "Euro", "symbol": "‚Ç¨", "flag": "üá™üá∫"},
        {"code": "GBP", "name": "British Pound", "symbol": "¬£", "flag": "üá¨üáß"},
        {"code": "KZT", "name": "Kazakh Tenge", "symbol": "‚Ç∏", "flag": "üá∞üáø"},
        {"code": "CNY", "name": "Chinese Yuan", "symbol": "¬•", "flag": "üá®üá≥"},
    ]
    for c in currencies:
        if not session.query(Currency).filter_by(code=c["code"]).first():
            session.add(Currency(**c))
    session.commit()
    session.close()

def fill_airlines():
    session = SessionLocal()
    airlines = [
        {"code": "DP", "name_ru": "–ü–æ–±–µ–¥–∞", "name_en": "Pobeda"},
        {"code": "SU", "name_ru": "–ê—ç—Ä–æ—Ñ–ª–æ—Ç", "name_en": "Aeroflot"},
        {"code": "S7", "name_ru": "S7 Airlines", "name_en": "S7 Airlines"},
        {"code": "UT", "name_ru": "–Æ–¢—ç–π—Ä", "name_en": "UTair"},
        {"code": "U6", "name_ru": "–£—Ä–∞–ª—å—Å–∫–∏–µ –∞–≤–∏–∞–ª–∏–Ω–∏–∏", "name_en": "Ural Airlines"},
    ]
    for a in airlines:
        if not session.query(Airline).filter_by(code=a["code"]).first():
            session.add(Airline(**a))
    session.commit()
    session.close()

def fill_translations():
    session = SessionLocal()
    for lang, entries in translations.items():
        for key, value in entries.items():
            if isinstance(value, list):
                for idx, item in enumerate(value):
                    compound_key = f"{key}_{idx}"
                    if not session.query(Translation).filter_by(key=compound_key, lang=lang).first():
                        session.add(Translation(key=compound_key, lang=lang, value=item))
            else:
                if not session.query(Translation).filter_by(key=key, lang=lang).first():
                    session.add(Translation(key=key, lang=lang, value=value))
    session.commit()
    session.close()

def get_currency_flag(code: str) -> str:
    session = SessionLocal()
    currency = session.query(Currency).filter_by(code=code.upper()).first()
    session.close()
    return currency.flag if currency else ""

def build_currency_inline_keyboard():
    session = SessionLocal()
    currencies = session.query(Currency).all()
    session.close()
    keyboard = []
    row = []
    for i, c in enumerate(currencies, start=1):
        button = InlineKeyboardButton(
            text=f"{c.flag} {c.code} ‚Äî {c.name} ({c.symbol})",
            callback_data=f"currency:{c.code}"
        )
        row.append(button)
        if i % 2 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    return InlineKeyboardMarkup(keyboard)

def build_filter_markup(context) -> InlineKeyboardMarkup:
    lang = context.user_data.get("lang", "ru")
    filters = context.user_data.setdefault("filters", {})
    passengers = filters.get("passengers", 1)
    direct = filters.get("direct", None)
    if direct is True:
        direct_label = t("direct_flights_only", lang)
    else:
        direct_label = "‚úàÔ∏è ‚úÖ " + t("include_transfers", lang)
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚ûñ", callback_data="passenger_minus"),
            InlineKeyboardButton(f"üë• {passengers} {plural_passenger(passengers, lang)}", callback_data="noop"),
            InlineKeyboardButton("‚ûï", callback_data="passenger_plus")
        ],
        [InlineKeyboardButton(f"‚úàÔ∏è {direct_label}", callback_data="toggle_direct")],
        [
            InlineKeyboardButton(t("filter_done", lang), callback_data="filters_done"),
            InlineKeyboardButton(t("filter_reset", lang), callback_data="filters_reset")
        ]
    ])

def build_tracking_settings_keyboard(lang="ru", price=None, percent=None) -> InlineKeyboardMarkup:
    price_label = t("track_set_price_val", lang, value=price) if price is not None else t("track_set_price", lang)
    percent_label = t("track_set_percent_val", lang, value=percent) if percent is not None else t("track_set_percent", lang)
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton(price_label, callback_data="track_price"),
            InlineKeyboardButton(percent_label, callback_data="track_percent"),
        ],
        [
            InlineKeyboardButton(t("track_save", lang), callback_data="track_confirm"),
            InlineKeyboardButton(t("track_cancel", lang), callback_data="track_cancel"),
        ]
    ])
